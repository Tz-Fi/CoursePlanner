mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mdf)
dim(mdyf)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
select
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch:
sdf
sdfsda
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "lunux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_bg = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20,size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
summarize(cran)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?gorup_by
?group_by
sirl()
swilr()
swirl()
library(swirl)
swirl()
0
main()
library(dplr)
library(dplyr)
tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(mean(size), by_package)
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
kladjf
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.9)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
ok
skip()
submit()
submti()
submit()
submit()
swirl)()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
reset()
swirl()
skip()
students3
submit()
?spread
submit()
submit()
sumit()
submit()
submit()
submit()
submit()
submit()
submit()
skip()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
?mutate4class
students3$class
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, "passed" = T)
passed <- passed %>% mutate(status = "passed" = T)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
play()
passed <- passed %>% select(name, class, final status)
passed <- passed %>% select(-passed)
passed
correct <- bind_rows(passed, failed) %>% select(-passed)
correct <- select(bind_rows(passed, failed),-passed)
correct <- select(bind_rows(passed, failed), names, class, final, status)
correct <- select(bind_rows(passed, failed), name, class, final, status)
correct
nxt()
sat
?separate
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library("lubridate")
library(lubridate)
help(package = lubridate)
today
today()
this_dy <- today()
this_day <- today()
this_day
year(this_day)
rm("this_dy")
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy(March 12, 1975)
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(//"192012")
ymd("//192012")
ymd("1920/1/2")
dt1
play()
class(dt1)
nxt()
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now()
?no
?now
nyc <- = now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, 17, 34)
?update
?lubridate.update
update(depart, hours = hours + 17, minutes = minutes + 34)
depart <- update(depart, 17, 34, 0)
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
deoart
depart
arrive <- depart + hours(15) + minutes(50)
?width_tz
?with_tz
with_tz(arrive, tzone = "America/New_York")
with_tz(arrive, tzone = "Asia/Honk_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Honk_Kong")
arrive <- with_tz(arrive, "Asia/Honk_Kong")
with_tz(arrive, "Asia/Honk_Kong") %>% arrive
arrive <- with_tz(arrive, "Asia/Honk_Kong")
skip()
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("ggviz")
install.packages("devtools", "testthat", "roxygen2", "knitr")
install.packages("testthat")
install.packages("devtools")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("knitr")
devtools::has_devel()
install.packages("stringr")
Frankenstein <- paste0(frankenstein)
nonsense = "  There was an Old Man in a tree,
Who was horribly bored by a Bee;
When they said, 'Does it buzz?' he replied, 'Yes, it does!\t
It's a regular brute of a Bee.'"
# An extract from "Frankenstein" by Mary Wollstonecraft (Godwin) Shelley.
#
frankenstein = c(
"Six years have passed since I resolved on my present undertaking.",
"I can, even now, remember the hour from which I dedicated myself to this great enterprise.",
"I commenced by inuring my body to hardship.", "I accompanied the whale-fishers on several expeditions to the North Sea; I voluntarily endured cold, famine, thirst, and want of sleep; I often worked harder than the common sailors during the day and devoted my nights to the study of mathematics, the theory of medicine, and those branches of physical science from which a naval adventurer might derive the greatest practical advantage.",
"Twice I actually hired myself as an under-mate in a Greenland whaler, and acquitted myself to admiration. I must own I felt a little proud when my captain offered me the second dignity in the vessel and entreated me to remain with the greatest earnestness, so valuable did he consider my services.",
"And now, dear Margaret, do I not deserve to accomplish some great purpose?  My life might have been passed in ease and luxury, but I preferred glory to every enticement that wealth placed in my path.",
"Oh, that some encouraging voice would answer in the affirmative!  My courage and my resolution is firm; but my hopes fluctuate, and my spirits are often depressed.",
"I am about to proceed on a long and difficult voyage, the emergencies of which will demand all my fortitude:  I am required not only to raise the spirits of others, but sometimes to sustain my own, when theirs are failing."
)
Frankenstein <- paste0(frankenstein)
Frankenstein
Frankenstein <- paste(frankenstein)
Frankenstein
library(stringr)
?str_c
Frankenstein <- paste(frankenstein, collapse = TRUE)
?paste
Frankenstein <- paste(frankenstein, collapse = " ")
Frankenstein
?str_c
?str_split
Nonsense <- str_split(nonsense, "\n")
Nonsense
?str_trim
str_trim(Nonsense, "both")
?unlist
sapply(Nonsense, str_trim)
Nonsense <- unlist(sapply(Nonsense, str_trim))
Nonsense
class(Nonsense)
lapply(Nonsense, str_trim)
unlist(lapply(Nonsense, str_trim))
paste(unlist(lapply(Nonsense, str_trim)), collapse = " ")
?str_count
str_count(Frankentstein, pattern = "\bme\b")
str_count(Frankenstein, pattern = "\bme\b")
str_count(Frankenstein, pattern = "\\bme\\b")
?str_locate
str_locate_all(Frankenstein, "\\bcourage\\b")
?str_extract
str_extract_all(Frankenstein, "\\bcourage\\b")
str_locate_all(Frankenstein, "\\b[Oo]wn\\b")
?str_replace_all
Frankentstein
Franenstein
Frankenstein
str_replace_all(Frankenstein, "Bee" "Donkey")
str_replace_all(Frankenstein, "Bee", "Donkey")
Frankenstein <- str_replace_all(Frankenstein, "Bee", "Donkey")
str_wrap(Frankenstein, 80)
cat(str_wrap(Frankenstein, 80))
df <- data.frame()
df$c1 <- c(1, 2, 3)
df <- data.frame(matrix(ncol = 5))
df
df$X1 <- c(1,2,3)
?rbind
rbind(df, c())
rbind(df, c(), c())
rbind(df, c(1,2,3,4,5))
row.names(df) <- c(df)
row.names(df)
rm(df)
install.packages("Selenium")
library(RCurl)
install.packages("XML")
install.packages("XML")
install.packages("XML")
install.packages("rvest")
library(rvest)
cwur <- read_html("http://cwur.org/2015/")
cur
cwur
cwur.tbl <- cwur %>% html_node(css = "#wrapper > aside > table")
cwur.tbl
cwur.table <- cwur.tbl %>% html_table()
cwur.table
names(cwur.table)
names(cwur.table) <- strtrim(names(cwur.table))
?strtrim
names(cwur.table) <- str_trim(names(cwur.table))
library(stringr)
names(cwur.table) <- str_trim(names(cwur.table))
names(cwur.table)
names(cwur.table) <- str_replace_all(names(cwur.table), " ", "_")
names(cwur.table)
?str_replace_all
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(fruits, "[aeiou]", "-")
str_replace_all(fruits, " ", "-")
names(cwur.table) <- str_replace_all(names(cwur.table), "\s", "_")
names(cwur.table) <- str_replace_all(names(cwur.table), "\\s", "_")
names(cwur.table)
names(cwur.table) <- str_replace_all(names(cwur.table), "--", "_")
names(cwur.table) <- str_replace_all(names(cwur.table), "__", "_")
names(cwur.table)
str_replace_all(cwur.table, "\s", " ")
str_replace_all(cwur.table, "\\s", " ")
sapply(cwur.table, FUN = function(n) {str_replace_all(n, "\\s", " ")})
head(sapply(cwur.table, FUN = function(n) {str_replace_all(n, "\\s", " ")}))
cwur.table$Institution <- sapply(cwur.table$Institution, FUN = function(n) {str_replace_all(n, "\\s", " ")})
cwur.table$Institution
cwur.table[cwur.table$Institution == "McGill University",]
?mlbench
??mlbench
data()
data(package = .packages(all.available = TRUE))
Robey
library(car)
thepills <- Robey
View(thepills)
rm(thepills)
detach(car)
detach("package:vegan"m unload = TRUE)
detach("package:vegan", unload = TRUE)
detach("package:car", unload = TRUE)
library(lubridate)
load("~/Documents/iX/IData/webDFS_results.RData")
rm(list = ls())
load("~/Documents/iX/IData/webDFS_results.RData")
leafPages[[1]]
V <- c(1, 2, 3)
W <- c(4, 5, 6)
??cross
??cross product
??(cross product)
??crossprod
?crossprod
crossprod(V, W)
matrix
matrix(V, W, nrow = 2, ncol = 3)
M <- matrix(V, W, nrow = 2, ncol = 3)
M
M[2,] <- W
M
crossprod(M)
outer(V, W)
outer(V, W, " ")
outer(V, W, "c")
outer(V, W, "matrix")
M
M[3,] <- M[2,]
rbind(M, W)
M
M <- rbind(M, W)
M
vec <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
typeof(vec)
class(vec)
attributes(vec)
?is.vector
setwd("~/Documents/programming/web/CoursePlanner/dataprep")
library(readr)
softengcourses <- read_csv("SoftEndCoursesOnly.csv",col_names = T)
str(softengcourses)
df <- read_csv("courseSheet.csv",col_names = T)
which(df$code %in% softengcourses)
sapply(df,class)
class(softengcourses)
which(df$code %in% softengcourses$CourseCodes)
df[,relevantIndices]
relevantIndices <- which(df$code %in% softengcourses$CourseCodes)
df[,relevantIndices]
relevantIndices <- which(df$code %in% softengcourses$CourseCodes)
df[relevantIndices,]
soendf <- df[relevantIndices,]
View(soendf)
library(stringr)
sapply(soendf, function(col) {
str_replace(col,"none","")
})
sapply(soendf, function(col) {
str_replace(col,"none","")
}) %>% View()
soendf <- sapply(soendf, function(col) {
str_replace(col,"none","")
})
length(cols(soendf))
length(colnames(soendf))
nrow(soendf)
ncol(soendf)
soendf[,-c(ncol(soendf)-1,ncol(soendf))]
soendf[,-c(ncol(soendf)-1,ncol(soendf))] %>% View()
soendf <- soendf[,-c(ncol(soendf)-1,ncol(soendf))] %>% View()
ncol(soendf)
softengcourses <- read_csv("SoftEndCoursesOnly.csv",col_names = T)
df <- read_csv("courseSheet.csv",col_names = T)
relevantIndices <- which(df$code %in% softengcourses$CourseCodes)
soendf <- df[relevantIndices,]
soendf <- sapply(soendf, function(col) {
str_replace(col,"none","")
})
ncol(soendf)
soendf <- soendf[,-c(ncol(soendf)-1,ncol(soendf))]
ncol(soendf)
View(soendf)
sapply(soendf, function(col) {
col[is.na(col)] <- ""
}) %>% View()
sapply(soendf, function(col) {
col[is.na(col)] <- ""
}) %>% View()
class(soendf)
soendf <- data.frame(soendf)
is.na(soendf$note)
soendf$col[is.na(soendf$note)] <- ""
View(soendf)
soendf$note[is.na(soendf$note)] <- ""
soendf <- soendf[,-ncol(sonedf)]
soendf <- soendf[,-ncol(soendf)]
soendf$note[is.na(soendf$note)] <- ""
class(soendf$note)
class(soendf$note) <- character
soendf$note <- as.character(soendf$note)
soendf$note[is.na(soendf$note)] <- ""
soendf <- soendf[,-c(ncol(soendf))]
View(soendf$prerequisites)
class(soendf$prerequisites)
sapply(soendf,function(col) {
col <- as.character(col)
})
View(soendf)
class(soendf$prerequisites)
?sapply
lapply(soendf,function(col) {
col <- as.character(col)
})
class(soendf$prerequisites)
lapply(soendf, function(col) {
col <- character(col)
}) %>% lapply(class)
character(c(1,2,3))
lapply(soendf, function(col) {
col <- as.character(col)
}) %>% lapply(class)
class(soendf$prerequisites)
soendf <- data.frame(lapply(soendf,as.character),stringsAsFactors = F)
lapply(soendf,class)
class(soendf$prerequisites)
soendf$corequisites[str_detect(soendf$corequisites, "CEGEP")] <- ""
soendf$corequisites[str_detect(soendf$corequisites, "Cegep")] <- ""
colnames(soendf)[ncol(soendf)-1] <- "semestersOffered"
write_csv(soendf,"soendf.csv")
